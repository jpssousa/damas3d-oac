*** Branch player

FLUXO: MENU -> GAME -> PLAYER VS PLAYER || PLAYER VS CPU -> GAME LOOP -> ( PLAY -> LIFE_CHECK -> PLAY -> ... )

* GAME_LOOP

Passa como argumento para a função PLAY:
	a0 = [1, 2] # vez do jogador 1 ou jogador 2

Implementa o loop do jogo.

* PLAY

Recebe como argumento de GAME_LOOP:
	a0 = [1, 2] # vez do jogador 1 ou jogador 2

Implementa uma jogada genérica.

É composto das seguintes funções:
	PREPROCESSING
	INPUT
	POSTPROCESSING

** PREPROCESSING

Recebe como argumento de PLAY:
	a0 = [1, 2] # vez do jogador 1 ou jogador 2

Percorre o tabuleiro a procura das peças do jogador da vez.
Ao encontrar uma peça do jogador, passa o endereço dessa peça e seu tipo para a função CAPTURE_CHECK.
Se capture check retornar um vetor de destinos nulo, quer dizer que não há capturas a serem feitas, chama MOVE_CHECK.
Se capture check retornar um vetor de destinos não-nulo, chama INPUT para pegar input do usuário.
Se o vetor de destinos for nulo, zera os pontos de vida do usuário e chama LIFE_CHECK.
Se o vetor de destinos não for nulo, chama a função INPUT para pegar input do usuário.

*** CAPTURE_CHECK

*** MOVE_CHECK

** INPUT

*** PLAYER_INPUT

*** PLAYER_INPUT_CHECK

** POSTPROCESSING


global variables:

s0 = initial address of board
s1 = final address of board
s2 = number of p1 tokens 
s3 = number of p2 tokens
s4 = initial address of destinations array (list)
s5 = final address of destinations array (list)

code:

void game_loop ()
{
	play(player's turn);
	life_check();
}

void play (player's turn)
{
	preprocessing(player's turn);

	do
	{
		x = input(); // origin
		y = input(); // destination
	} while (y is not on the possible destinations or x can't make the play)

	postprocessing(x, y);
}

void preprocessing (player's turn)
{
	for (every piece on the board)
		if (the piece belongs to the player)
			list += capture_check(piece's address, type of piece);

	if (list == NULL)
	{
		for (every piece on the board)
			if (the piece belongs to the player)
				list += move_check(piece's address, type of piece)

		if (list == NULL)
			game_over();
	}
}

int input ()
{
	// get player input and turn it into offset (or address on the board)

	return player_input;
}

void postprocessing (x, y)
{
	
}